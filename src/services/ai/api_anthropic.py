import json
import logging
import time
from typing import Optional, Dict, Any

from anthropic import Anthropic

from src.config import ANTHROPIC_API_KEY, ANTHROPIC_MODEL_NAME
from src.services.ai.prompt import prompt
from src.utils.image_recognition import is_valid_json_response, extract_json_from_response
from .message import message_for_anthropic

logger = logging.getLogger(__name__)


client = Anthropic(api_key=ANTHROPIC_API_KEY)


async def send_request_to_anthropic(message: list, max_retries: int = 2) -> Optional[str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Anthropic API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

    Args:
        message: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)

    Returns:
        –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    for attempt in range(max_retries):
        try:
            # Start timer
            start_time = time.time()

            response = client.messages.create(
                model=ANTHROPIC_MODEL_NAME,
                max_tokens=2048,
                messages=message
            )

            # End timer
            end_time = time.time()
            elapsed_time = end_time - start_time

            response_text = response.content[0].text
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥. –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response_text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç JSON
            if is_valid_json_response(response_text):
                return response_text
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON")
                if attempt < max_retries - 1:
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2})")
                    continue
                else:
                    logger.error(f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON. response_text: {response_text}")
                    return None

        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2})")
                continue
            else:
                logger.error("–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                return None

    return None


async def recognize_check_by_anthropic(file_location_directory: str) -> Optional[Dict[Any, Any]]:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —á–µ–∫ —Å –ø–æ–º–æ—â—å—é Anthropic API.

    Args:
        file_location_directory: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —á–µ–∫–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API
        message = await message_for_anthropic(file_location_directory, prompt=prompt)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        response_text = await send_request_to_anthropic(message, max_retries=2)

        if response_text is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        data = extract_json_from_response(response_text)

        if data:
            logger.info("–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            return data
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞")
            return None

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
        return None
    finally:
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if 'message' in locals():
            del message


if __name__ == '__main__':
    # Start timer
    start_time = time.time()

    completion = recognize_check_by_anthropic("../images/d783c1e1-6802-4a4c-ad82-a0de3907fd9c")

    # End timer
    end_time = time.time()
    elapsed_time = end_time - start_time

    # Output result and time taken
    print("üß† Recognition Output:")
    print(completion)
    print(f"\n‚è±Ô∏è Time taken for recognition: {elapsed_time:.2f} seconds")
