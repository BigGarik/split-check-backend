import logging

from fastapi import Request, APIRouter, Depends, HTTPException
from fastapi.responses import RedirectResponse
from starlette import status
from starlette.responses import HTMLResponse

from src.api.deps import get_current_user
from src.config import config
from src.config.type_events import EVENT_DESCRIPTIONS
from src.models import User
from src.redis import redis_client
from src.schemas.app import LogLevelUpdateRequest
from src.version import APP_VERSION

router = APIRouter()


@router.post(
    "/log-level",
    summary="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
    description="""
**–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**

üîí –î–æ—Å—Ç—É–ø: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
- `DEBUG`
- `INFO`
- `WARNING`
- `ERROR`
- `CRITICAL`

üìå –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis.
    """,
    response_description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
    status_code=status.HTTP_200_OK,
    tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"]
)
async def set_log_level(
        req: LogLevelUpdateRequest,
        user: User = Depends(get_current_user),
):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ FastAPI.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ Redis (–∫–ª—é—á: `<service_name>:log_level`).

    :param req: –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–µ–º level (Literal)
    :param user: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :raises HTTPException 403: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    :return: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    if user.id not in config.app.admin_ids:
        raise HTTPException(status_code=403, detail="Forbidden")

    level = req.level

    logger = logging.getLogger(config.app.service_name)
    logger.setLevel(level)

    for handler in logger.handlers:
        handler.setLevel(level)

    await redis_client.set(f"{config.app.service_name}:log_level", level)

    return {"message": f"Log level changed to {level}"}


@router.get("/download")
async def download_app(request: Request):
    user_agent = request.headers.get("user-agent", "").lower()

    # ios_app_url = "https://apps.apple.com/app/your-app-id"
    # android_app_url = "https://play.google.com/store/apps/details?id=your.package.name"

    ios_app_url = "https://apps.apple.com"
    android_app_url = "https://play.google.com"

    if "iphone" in user_agent or "ipad" in user_agent or "ipod" in user_agent:
        return RedirectResponse(ios_app_url)
    elif "android" in user_agent:
        return RedirectResponse(android_app_url)
    else:
        return {"error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"}


@router.get("/events", summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π", response_description="–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
async def get_events():
    return [
        {"event_type": event, "description": description}
        for event, description in EVENT_DESCRIPTIONS.items()
    ]


@router.get("/share/{uuid}", response_class=HTMLResponse)
async def redirect_to_app(uuid: str):
    html_content = """
    <html>
        <head>
            <title>Check Sharing</title>
        </head>
        <body>
            <h1>Check Shared Successfully!</h1>
        </body>
    </html>
    """
    return html_content


@router.get("/version")
async def read_version():
    return {"version": APP_VERSION}


@router.get("/health")
async def health_check():
    return {"status": "ok"}