from typing import Optional

from fastapi import Request, HTTPException, Depends, status
from fastapi.security import OAuth2PasswordBearer, HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError
from starlette.websockets import WebSocket

from src.auth.dependencies import get_firebase_user
from src.config import ACCESS_SECRET_KEY
from src.core.security import verify_token
from src.redis.utils import get_token_from_redis, add_token_to_redis
from src.repositories.user import get_user_by_email, unmark_user_as_deleted
import logging

logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ —Å—Ö–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/token", auto_error=False)
http_bearer = HTTPBearer(auto_error=False)


async def get_current_user(
        request: Request,
        oauth2_token: Optional[str] = Depends(oauth2_scheme),
        http_auth: Optional[HTTPAuthorizationCredentials] = Depends(http_bearer)
):
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ö—É–∫–∏ (access_token)
    - OAuth2
    - Bearer —Ç–æ–∫–µ–Ω
    - Firebase —Ç–æ–∫–µ–Ω
    """
    try:
        logger.debug(f"oauth2_token: {oauth2_token}")
        logger.debug(f"http_auth: {http_auth}")

        firebase_token = None
        email = None

        # ü•á –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0: –ö—É–∫–∞
        cookie_token = request.cookies.get('access_token')
        if cookie_token:
            logger.debug("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0: access_token –∏–∑ –∫—É–∫–∏")
            email, _ = await verify_token(ACCESS_SECRET_KEY, token=cookie_token)

        # ü•à –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: OAuth2 —Ç–æ–∫–µ–Ω
        elif oauth2_token:
            logger.debug("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: OAuth2 —Ç–æ–∫–µ–Ω")
            email, _ = await verify_token(ACCESS_SECRET_KEY, token=oauth2_token)

        # ü•â –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Firebase —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        elif http_auth:
            logger.debug("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Firebase —Ç–æ–∫–µ–Ω")
            firebase_token = http_auth.credentials
            claims = await get_token_from_redis(firebase_token)
            if not claims:
                claims = get_firebase_user(firebase_token)
                await add_token_to_redis(firebase_token, claims)
            email = claims.get('email')

        # üü° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Authorization header –≤—Ä—É—á–Ω—É—é
        else:
            auth_header = request.headers.get('Authorization')
            if auth_header:
                logger.debug("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Authorization header")
                if auth_header.startswith('Bearer '):
                    firebase_token = auth_header.replace('Bearer ', '')
                else:
                    firebase_token = auth_header

                claims = await get_token_from_redis(firebase_token)
                if not claims:
                    claims = get_firebase_user(firebase_token)
                    await add_token_to_redis(firebase_token, claims)

                email = claims.get('email')
            else:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    headers={"WWW-Authenticate": "Bearer"}
                )

        # üîê –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        user = await get_user_by_email(email)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        if user.is_soft_deleted:
            await unmark_user_as_deleted(user)

        return user

    # üëá –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    except HTTPException as he:
        if request.url.path in ['/docs', '/redoc', '/openapi.json']:
            return None
        raise he
    except JWTError:
        if request.url.path in ['/docs', '/redoc', '/openapi.json']:
            return None
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
            headers={"WWW-Authenticate": "Bearer"}
        )
    except Exception as e:
        if request.url.path in ['/docs', '/redoc', '/openapi.json']:
            return None
        logger.exception(e)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            headers={"WWW-Authenticate": "Bearer"}
        )



async def get_current_user_for_websocket(websocket: WebSocket):
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OAuth2 –∏–ª–∏ Firebase –¥–ª—è WebSocket
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ WebSocket
        id_token = websocket.query_params.get('id_token')
        token = websocket.query_params.get('token')

        if token:
            # OAuth2 —Ç–æ–∫–µ–Ω
            email, _ = await verify_token(ACCESS_SECRET_KEY, token=token)
        elif id_token:
            # Firebase —Ç–æ–∫–µ–Ω
            claims = await get_token_from_redis(id_token)
            if not claims:
                claims = get_firebase_user(id_token)
                await add_token_to_redis(id_token, claims)

            email = claims.get('email')
        else:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )

        user = await get_user_by_email(email)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        return user
    except HTTPException as he:
        raise he
    except Exception as e:
        logger.exception(e)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
def require_auth(current_user=Depends(get_current_user)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            headers={"WWW-Authenticate": "Bearer"}
        )
    return current_user